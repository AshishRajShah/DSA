package Revision;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
// import java.util.Set; 


/*          ----------------------------------      Collections Framework..............................

Collection(I) : - When Group of elements/objects represent as a single entity... We need it because it dosen't bound 
                    himself in limit size..and it can also store heterogeneous data like list in python..
                    It represents a set of classes and interfaces.     
                    
                    purpose :- to acheive the data structure..

                  Array                                                                Collection
        i.  Fixed Size(Not growable in nature..)                     i.  Growable in nature...
                 (obj a[] = new obj[5];)                                    Collection arraylist = new arraylist();

        ii. Homogeneous (similar dataType ele.)                     ii. Heterogeneous..

       iii. Readymade method in array like sort,search etc.        iii. It is implemented underlaying Data Structure.. 
                (to perform any operation we have to                        (Readymade method's are available...)
                    write the structure of code....)


        Method in Collection.............
              i. add(object obj)            ---- It is used to insert an element in this collection...
             ii. addAll(collection c)       ---- It is used to insert the specified collection elements in the invoking collection.
            iii. remove(object obj)         ---- It is used to delete an element from the collection.
             iv. removeAll(collection c)    ---- It is used to remove all the elements from the list.
              v. retainAll(collection c)    ---- It is used to retain all the elements in the list that are present in the specified
                                                 collection.
             vi. clear()                    ---- It removes the total number of elements from the collection.
            vii. isEmpty()                  ---- It checks if collection is empty.
           viii. size()                     ---- It returns the total number of elements in the collection.
             ix. contains(object obj)       ---- It is used to search an element.
              x. containsAll(collection c)  ---- 
             xi. toArray(Collection c)      ---- It Convert Collection into Array format..

Collections :- It is a Predefined Class from java.utils pkg. It contains certain method and these method is used to perform
                operation on Collection(I) object.
                        eg: Collections.sort(arr);      //arr - arraylist from Collection..
                            Collections.shuffle(arr);
                            Collections.reverse(arr);
                            Collections.sort(arr,Collections.reverseOrder());


                        I - interface       C - Class........
                            -------------------      Collection(Parent Interface)      ----------------------
                          /                                |                                  \
                        /                                  |                                   \
                      /                                    |                                    \
            I. List(I)                                 II. Set(I)                               III. Queue(I)
    Note:- 
       -- Insertion order preserved.              -- Insertion order doesn't Preserved.   -- It basically implemented FIFO
           (put the value as they r assigned.)                                                Concept. Prior processing..
       -- Duplicate also allowed...               -- Duplicate values not allowed...
        
            -- Arraylist..(c)                                  -- Hashset..                         -- PriorityQueue(c)...
            -- Linked list..(c)                                -- Linked hashset..                  -- LinkedList(c)..
            -- Vector \                                        -- SortedSet(I)                      -- Dequeue(I)                    
                       --   legacy classes                       -TreeSet(c)                        -- BlockingQueue(I)
            -- Stack  /                                                                             -- BlockingDequeue(I)
        Method :-                                 Method:-
          add(index,obj)                                add(obj)
          addAll(index,Collection )                     addAll(Collection)
          remove(index,object)                          remove(obj)
          get(index)-> retrieve obj from the list       retainAll(coll)
          set(index, Obj) -> replace the obj to         containAll(grp of elem)
                             new obj.                   removeAll(coll)
          isEmpty()                                     isEmpty()

                            --------  Not available in Collection(Interface)      ---------------------
            I. Map(I)
    Note :- 
            It is used to data store in key & value pair.. and key should be unique but value can be duplicate..
                Each key and value r obj. Map(I) is implemented by HashMap & HashTable classes..
                        --  HashMap..(c)
                        --  HashTable..(c)
                        --  LinkedHashMap
        
                            --------  Iterator Interface    ---------------------
    Note :-        
            --  The Iterable interface is the root interface for all the collection classes. The Collection interface 
                extends the Iterable interface and therefore all the subclasses of Collection interface also implement 
                the Iterable interface.
                    Syntax: - Iterator<T> iterator()  
                        -- hasNext()  -- It returns true if the iterator has more elements otherwise it returns false.
                        -- next()     -- It returns the element and moves the cursor pointer to the next element.     
                        -- remove()   -- It returns the element and moves the cursor pointer to the next element.

*/
class Freshers
{
    String name;
    int salary;
    int experience;

    Freshers(String name,int salary,int i)
    {
        this.name =name;
        this.salary =salary;
        experience = i;
    }

    public String toString()        //--- override the reference of Class object..
    {
        return name +" "+salary+" "+experience;
    }
}

public class CollectionPractice {
    // ---------------------------------------         List(Interface)         -------------------------------------
    public static void Arraylist()
    {
    // ---------------------------------------         ArrayList(java.util)         ------------------------------------
               
    /* 
    Note :-     In Arraylist all elements preserved in a consequetive manner.. 
        Method : -
                add()                            add(index,Obj)                     addAll(Collection)
                remove(obj)                      remove(index)                      removeAll(Collection)
                get(index),                      set(index,newele.) -> return rem element 
                isEmpty() -> t/f                    contains(obj) -> t/f
                addAll(col) -> add group of ele. in a single list 
                removeAll(col)

        syntax:-
                ArrayList ar = new ArrayList();     --- by default it allow us to store 10 obj/elements..
                                            (3);        -- if i put 3 then it will store only 3 obj.
                                    ________________________________________
                                   | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
                                   -----------------------------------------
                    whenever it reaches his max size/fill its size.. 
                                suppose we have to insert 1 more element.. then it will not add the element
                                  directly in  previous array.. It will create a new obj and add new element
                                  in new object..           
                             _____________________________________________
                            | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |
                            ---------------------------------------------
                            

    */
    // ArrayList<Integer> arr = new ArrayList<>();  
        List<Integer> arr = new ArrayList<>();
        arr.add(5);              //--  it puts the value as they r inserted..(Collection method)
        arr.add(7);
        arr.add(1,3);           //--- insert 3 at index 1(list method)
        arr.add(9);
    
        // for (Integer in : arr)               //-- print the arraylist....
        for (Object in : arr)
        {       
            System.out.print(in+" ");
        }

        //We can directly pass arraylist to another for copy the data...
        ArrayList<Integer> arr1 = new ArrayList<>(arr);         //--similar to addAll(Collection)
        arr1.add(111);
        System.out.println("\nArraylist arr copy to arr1 : "+arr1);     // [5, 3, 7, 9, 111]
        
        //size......
        System.out.println("\n\nsize of arraylist : "+arr.size());         // --- it gives the size of array... 4 .

        //Fetch element.......
        System.out.println("Object at Index 2 is: "+arr.get(2));    // --  Object at Index 2 is: 7
        
        //Replace element with exist one's.....
        int replace = arr.set(2,12);                                    //  --- set return which obj has eleminated..
        
        System.out.println("Replace exist obj "+ replace +" to new at Index 2 is: "+arr.set(2,12));

        //check element is exist or not.....return boolean value....
        System.out.println("In Arraylist 5 is present or not :  "+ arr.contains(5));
        
        //Remove element from index.....
        arr.remove(0);
        
        // arr.removeAll(arr);                                             // --- remove all elements from collection.. 
        
        //check Empty or not....
        if(arr.isEmpty())
        {
            System.out.println("\nArray arr is Empty... ");
        }
        else{
            System.out.println("\nArray is not Empty....");
        }
        ArrayList<Integer> al = new ArrayList<>();
        
        //add all 1 arraylist element to other arraylist....
        al.addAll(arr);
        System.out.println("\nArray al Value is : "+ al);   //---   [3, 12, 9]

                  //-------        Use Collections Class for Collection object..
    
        Collections.shuffle(arr);    //-------  Shuffle the array/list....
        Collections.sort(arr);      //--------  Sort the array.....
        System.out.println("\nNow Sorted array are : "+ arr);
        Collections.reverse(arr);
        System.out.println("\nNow Reverse array are : "+ arr);
    
                 // ---- reverse sorted array in a command...
        // Collections.sort(arr,Collections.reverseOrder());
        // System.out.println("Reverse : " + arr ); 
    
                 // ---- Converts array to arraylist...
        String []s = {"Ak","Raja","Rudra","Ishu"};
    
        ArrayList<String> a_al = new ArrayList<>(Arrays.asList(s));
        System.out.println("Converted array to array list : "+ a_al);

        //Class object print..
        Freshers fr = new Freshers("Akshay", 65000, 3);
        ArrayList<Freshers> al_fr = new ArrayList<>();
        al_fr.add(fr);
        al_fr.add(new Freshers("Avi", 56000, 5));
        System.out.println(al_fr);      ///--cureently it shows address of the object..
                    // --- once we create object of any class it's implicit reference id generated by to_string  
                        //-- method which is available in Object class...
                        // to get desire output we can override toString()..

     /*    //print individual obj.. of a class
        Iterator<Freshers> ift = al_fr.iterator();
        while(ift.hasNext())                //--- not working..
        {
            Fresher f =(Fresher)iterator.next();

        } */
    
    }

    public static void linkedlist()
    {
    // ---------------------------------------         LinkedList(java.util)         ------------------------------------
    /* 
    Note:  It is a class which is implemented list Interface as well as Queue Interface..  It will be used most 
            of  the time to developed the stack(LIFO) & queue.. 
            properties:-
                    -- Allow duplicate value..
                    -- Insertion preserved but random place. --> but these element internally linked with the addresses
                                                            of those elements.. and every node has previous & next node 
                                                            addresses..So, it is by default follow "Doubly Linked "
                                                            Data Structure..
                    -- null is also acceptable..

                Best Mode for operation.. (When we have more no. of operation)..

                    ArrayList  --  Retrive   (bcz it can perform index based operation. so data can be easily
                                        retrive from get() in arraylist..)
                    LinkedList -- Insertion / Deletion  (Bcz in array to insert/del value we need to do 
                                        shifting operation which will take more time & reduce performance..)  
                                -- In this every element/obj is called as a node.. and every node is divided into
                                    three parts..   ______________________     _______________________      _____________________
                                                   | null | x | ad_of_y_ |    | ad_of_y | y | ad_of_z|     | ad_of_Z | Z | null |
                                                   ----------------------     ------------------------     ---------------------- 
                                    here ad -> address...
                    
        Method :- 
            add()                               add(index,Obj)                          addAll(Collection)
            remove(obj/element) -> string       remove(index)                           removeAll(Collection)
            get(index),                         set(index,newele.) -> return remove element 
            addFirst(obj)                       addlast(obj)                            ListIterator()
            removeFirst()                       removeLast()                            -- by this we can iterate forward
            getFirst()                          getLast()                                 or backward both dir. but,to go
            size()      --- inherited from list --- list inherited from Collection         backward 1st need to go frwd..
    */                              
    
    LinkedList<Integer> ll =new LinkedList<>();
    //add......
    ll.add(100);
    ll.add(300);
    ll.add(0,23);
    ll.add(65);
    ll.add(112);
    ll.add(null);


    System.out.println("Linked List : " + ll);          //---   [23, 100, 300, 65, 112, null]
    System.out.println("Size of Linked List : " + ll.size());       //  --  6

    // Remove...
    int rm = ll.remove(3);                          //  ----   65     remove also return  del value like pop in python..
    System.out.println("\nAfter removing "+ rm + " Linked list is : "+ ll); //---   [23, 100, 300, 112, null]
    // ll.remove("string");        ---- if linked list has string value..
    
    // add...
    ll.add(2, 11);
    System.out.println("After adding element : "+ll);   //----   [23, 100, 11, 300, 112, null]

    //retrieving.....
    System.out.println("Retrieve Element at index 2 : "+ ll.get(2));        //---   11

    //replace value with a new value....
    int a = ll.set(2, 112);     //---   11
    System.out.println("Replace element "+a+" at index 2 : "+ ll.set(2, 112));      //--- 112
    System.out.println(ll);             //---   [23, 100, 112, 300, 112, null]

    //check element is there or not.....
    System.out.println("\nCheck element is there or not....");
    if(ll.contains(300))
    {
        System.out.println("Element is available in linked list...");
    }else{
        System.out.println("Element is not available... in linked list...");
    }

    //Reading element with the help of iterator....
    Iterator<Integer> it = ll.iterator();       // iterator interface traverse only forward direction..
    System.out.print("\nPrint linked list by iterator : - " );
    while(it.hasNext())     //at start interator pointer is at -1
    {                                                   
        System.out.print(it.next()+" ");    //and next take it to 1 step forward..that's mean 0,1..
    }

    //add element in first pos....
    ll.addFirst(5);
    System.out.println("\nAdd 5 in first place... : "+ll);  //---   [5, 23, 100, 112, 300, 112, null]
    
    //Remove all element....
    ll.removeAll(ll);
    System.out.println("\nNow Linked list is : "+ll);   //---   []


    // Collections all method will work in linkedlist like arraylist....

    }
    
    // ---------------------------------------         Set(Interface)         --------------------------------------
    public static void hashset()
    {
    // ---------------------------------------         Hashset(java.util)         ------------------------------------
    /* 
    Note :-    If you have more no. of searching then go for it....
                        It doesn't has own method... just use what it inherited from set..
                                                                    --    No index Concept..
            Properties :-       i. Duplicate element not allowed..
                               ii. Insertion order not preserved...
                              iii. It insert the element by using the concept HashCode
                                                    -> that's  why searching the ele. is very fast in HashSet..
                               iv. Heterogenous data allow...
                                v. HashTable Concept Follow..

            syntax:- 
                HashSet hs = new HashSet();             --- by default it allow us to store 16 obj/elements..
                HashSet<Integer> hs = new Hashset<>();
                                                        --- Load factor/fill ratio -- 0.75%;
                             ______________________________________________________________________
                            | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 |
                            -----------------------------------------------------------------------
                     load factor of 16 = 16*0.75% => 12
                            as soon as it reaches his load factor (0.75% or 75% =>12 ) of default size then it
                            create a new object..and the previou object collected by garbage collector...
                                so the new size will become 12+16 = 28.. (and this process will carry on further..)
                    
                    now hs obj refer to this new object..                       (16+12)
                             ___________________________________________________________________________
                            | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 |..28
                            ----------------------------------------------------------------------------
            eg:-
                Hashset hs = new Hashset(100);      
                or,
                Hashset hs = new Hashset(100,0.75);     --- we can define load factor..

        Method :-
                add(obj)                --> it doesn't has index concept..so
                                                ---- add(index,obj)  --can't use
                addAll(Collection)
                remove(obj)
                removeAll(Collection)
                contains(obj)                       containsAll(group of elements)
                isEmpty()
            
            Note:-  We can't Sort the HashSet..bcz it doesn't has Index Concept..
                            :--   To sort we have to convert it first of all in ArrayList and
                                    then we can sort with the help Collections Class..
    */
        
    HashSet<Integer> hs = new HashSet<>();  //default capcity 16 load factor 0.75
    // HashSet<Integer> hs_f = new HashSet<>(100,float(0.95));         
    hs.add(12);
    hs.add(100);
    hs.add(28);
    hs.add(11);
    System.out.println("Hashset is : "+hs);

    //Remove....
    hs.remove(28);                      //  ---- remove value from hashset..
    System.out.println("\nHashset is : "+hs);

    //Reading element from iterator...
    Iterator<Integer> it = hs.iterator();
    System.out.print("Reading hashset by iterator : ");
    while(it.hasNext())
    {
        System.out.print(it.next()+" ");
    }

    //containsAll.......
    HashSet<Integer> hss = new HashSet<>();
    hss.add(12);
    hss.add(15);
    System.out.println("\nCheck 12 and 15 is exists in  hashset first : "+hs.containsAll(hss));

    //      ---- Union.........Intersection........Difference
    System.out.println("\nHashSet 1: "+ hs);        //[100, 11, 12]
    System.out.println("HashSet 2: "+ hss);         //[12, 15]
    
    //union..       --- it preserve all element from both but unique...
    hss.addAll(hs);
    System.out.println("Current HashSet 2(Union): "+ hss);         // [100, 11, 12, 15]
    
    //Intersection..       --- it preserve only common value...
    hss.retainAll(hs);          //-- accept hs element which is common in hss.. 
    System.out.println("Common from Hashset 1 & Hashset 2(Intersection) : "+ hss);//[100, 11, 12]
    
    //Difference...
    hss.removeAll(hs);      //--- it removes hs hashset element from hss hashset...
    System.out.println("from Hashset 1 & Hashset 2(Difference) : "+ hss); // []

    //subset.....
    //hss.containsAll(hs);                  //--- return boolean value..
    }

    public static void linkedhashset()
    {
    // ---------------------------------------         LinkedHashset(java.util)         ------------------------------------
    /*
    Note :- 
            Properties :-
                          i. Duplicate not allowed..
                         ii. Insertion order is preserved....
                        iii. Hashtable + Linked list concept follow..
                        Hashtable :- array of linked list and each linked list called as bucket..
            syntax:- 
                LinkedHashSet hs = new LinkedHashSet();        --- by default it allow us to store 16 obj/elements..
                LinkedHashSet<Integer> hs = new LinkHashset<>();
                                                                --- Load factor/fill ratio -- 0.75 (represent 1%)
    
        Method :-
                Same as HashSet
    */
    LinkedHashSet<Integer> lhs =new LinkedHashSet<>();
    lhs.add(5);
    lhs.add(11);
    lhs.add(6);
    lhs.add(200);
    System.out.println("Linked HashSet :  "+lhs);

    // Iterate with foreach by object..
    for (Object in : lhs) {
        System.out.println(in);
    }

    }
    
    // ---------------------------------------         Queue(Interface)         ------------------------------------
    public static void priorityqueue()
    {
    // -----------------------------         PriorityQueue(java.util)         ------------------------------------
    /* 
    Note:- It follow FIFO(First In First Out) Concept..
            Properties :-
                          i. Duplicate Value allow..
                         ii. Insertion order preserved..
                        iii. Heterogeneous value not allowed 
                                            -- and by this cause only it is different from linked list.. 
        Method :- only 6(also available for linkedList)
                                        ----------- both add element in last bcz it's a queue..
              i. add(obj)   -- if addition is success then it returns true & if fail then returns Exception..
             ii. offer(obj) -- if addition is success then it returns true & if fail then returns Null..
                                                                        -------------------------------
                                        ----------- both returns head element from the queue..
            iii. element()  -- if queue is empty it will throw Exception..
                                    Exception : NoSuchElementException
             iv. peek()     -- if queue is empty it will return null..
                                                                         -------------------------------
                        ---------- both returns the head ele. and after return it will del the element from the queue...
              v. remove()   --  if queue is empty it will throw Exception..
             vi. poll()     --  if queue is empty it will return null..
    
    */
    PriorityQueue<Integer> prq = new PriorityQueue<>();
    // add()          offer()......
    prq.add(5);
    prq.add(30);
    prq.offer(12);
    prq.add(35);
    prq.offer(30);
    
    System.out.println("Priority Queue : "+ prq);
    
    // get head element.... peek()  -- element()
    System.out.println("\nHeader element in priority queue is : "+ prq.peek());
    System.out.println("Header element in priority queue is : "+ prq.element());
    
    //delete head element.. remove()   -- poll()
    System.out.println("\n Remove Header element in priority queue is : "+ prq.poll());
    System.out.println("Priority Queue : "+ prq);
    System.out.println("\nRemove Header element in priority queue is : "+ prq.remove());
    System.out.println("Priority Queue : "+ prq);

    //Read element..
    // for (Integer in : prq) {
    //     System.out.println(in);
    // }
    
    for (Object in : prq) {
        System.out.println(in);
    }

    }
    
    // ---------------------------------------         Map(Interface)         --------------------------------------
    public static void hashmap()
    {
    // -----------------------------        HashMap(java.util)         ------------------------------------ 
    /* 
    Note :-     It Uses underlaying Data Structure - HashTable..
                                                                                     ___________________
        Properties :-                                                               |  key   | value   |
                  i.  Duplicate key not allowed but value can be..                  |------------------|
                 ii.  Insertion Order not Preserved..                               |___101__ |___"A"_ |-- 1 entry
                iii.  Only 1 null key allowed but null values can be allow..        |___102__ |___"B"_ |     (pair k & v) 
                                                                                    |___103__ |___"C"__|   
                                                                                    |___104___|__"A"___|
                    -- initial capacity 16,load factor 0.75
            Syntax :-
                    HashMap<Key_Type,Value_Type> hm = new HashMAp<>();
        
            --  This particular entry we can represent by using 1 more Interface that is Entry(I).
                        interface HashMap
                        {
                            interface Entry
                            {
                                -- it's method use only on the entry obj from the HashMap..
                                Method :-
                                 entry ob.getkey()        --   return key...
                                          getValue()      --   return value...
                                          setValue(obj)   --   replace exist value with new one/update

                            }
                        }
                    A Entry is a sub-interface of  a HashMap...

        Method :-
            put(key,value)        --   It is used to add new entry..   
            putAll(Map m)         --   It can add multiple key,value pair/ multiple hashmap collection..
            get(key)              --   Return the value of key
            remove(key)           --   Remove the value along with key.   
            containsKey(key)      --   Return boolean value if key is present. 
            containsValue(value)  --   Return boolean value if value is present.  
            isEmpty()             --   Check HashMap is empty or not
            size()                --   Return the no. of key-value pair in HashMap
            ---------------
            keySet()              --    All keys fetch from HashMap     -> set is in keyset show no duplicacy..
            values()              --    All values fetch from HashMap
            entrySet              --    All Key-value fetch just like items in python..

    */  
    // HashMap hm = new HashMap<();     ---- doesn't work..
    HashMap<Integer,String> hm = new HashMap<>();

    //add key, value in HashMap....
    hm.put(101, "Akshay");
    hm.put(102, "Rudra");
    hm.put(103, "Bittu");
    hm.put(104, "David");
    System.out.println("HashMap : "+hm);

    //fetch value...        get(key)
    System.out.println("\nFetch Value at 103 from HashMap : "+hm.get(103) );    //  Bittu

    //remove entry..        remove(key)    -- it return del value like pop in python..
    String rm =hm.remove(104);  //---   David
    System.out.println("\nAfter remove "+ rm +" now HashMap is : "+hm);     //  {101=Akshay, 102=Rudra, 103=Bittu}

    //Check Key is Present or not ....      containsKey(key)
    System.out.println("\nCheck Key 102 is available or not in HashMap : "+hm.containsKey(102));    // true
    
    //Check value is Present or not ....      containsValue(key)
    System.out.println("Check Value Rudra is available or not in HashMap : "+hm.containsValue("Rudra"));  // true

    //Check Empty.....       --- isEmpty()   --> return true/false..

    //Fetch All key..from hashmap...           keySet()
    System.out.println("\nAll key set in HashMap are : - "+ hm.keySet());       //  [101, 102, 103]
    
    //Fetch All value..from hashmap...           keyValue()
    System.out.println("All Values in HashMap are : - "+ hm.values());           //  [Akshay, Rudra, Bittu]
    
    //Fetch All key-value as a set(entry)..from hashmap...           entrySet()     (Work as items in python.)
    System.out.println("\nFetch data in entry set(key-value pair) from HashMap : "+ hm.entrySet()); //  [101=Akshay, 102=Rudra, 103=Bittu]
    
    // fetch key and value.....
    // foreach(Object it :hm.keySet())      -- When obj is not specified(Heterogeneous..)
    for (Integer it : hm.keySet())      //--- keyset works here bcz dataType is specified..(Homogeneous)
    {
        System.out.println(it + " ---  "+ hm.get(it));    
    }

               //----------------      Entry Interface method....
    //Read individual obj one by one..
    for(Map.Entry entry : hm.entrySet())            // (key,value)
    {
     System.out.println(entry.getKey()+ " ->  "+entry.getValue());   
    }  
    }

    public static void hashTable() 
    {
    // -----------------------------        HashTable(java.util)         ------------------------------------ 
    /* 
    Note :-
        
            Properties :- 
                        i. Data store in key, value pair..
                        ii. Underlaying Data Structure  -- hashtable
                                    internally  it follow hashcode to store the data...

                    HashMap                                                             Hashtable
                 i.  non -synchronised                                       i. synchronized (thread-safe)
                                                                                    -- at a time only 1 thread allowed..
                ii.  Performance is fast..                                  ii. performance is poor than hashMap..
                iii. Null can be accept as a key                            iii. Null can't accepted.. 
                            but in multiple as value
                Map m = Collections.synchronizedMap(hashMap);   
                        -- by doing this we can synchronized HashMap..

            Syntax :- 
                HashTable<Integer,String> hs = new HashTable<>();   // Capacity is 11, load factor  0.75  --homogeneous
                HashTable t =new Hashtable(Initial_capacity , load_Factor)          --heterogeneous
            Method : - same as Hashmap...
    */
    Hashtable<Integer,String> hs = new Hashtable<>();
    hs.put(101,"Rudra");
    hs.put(102,"Ak");
    hs.put(103,"Raja");
    hs.put(104,"Ishu");
    // hs.put(Null, Null);      --- hashtable doesn't accept null.. but hashMap do...
        
    //Same method as HashMap....

    }
    public static void main(String[] args) 
    {
    // CollectionPractice.Arraylist();
    CollectionPractice.linkedlist();
    // CollectionPractice.hashset();
    // CollectionPractice.linkedhashset();
    // CollectionPractice.priorityqueue();
    // CollectionPractice.hashmap();
    CollectionPractice.hashTable();


    
    
   
    }
}
